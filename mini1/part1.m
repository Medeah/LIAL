% Side 90-91
A = [2.1  3.2  6.1  -2.3;
     1.3  -2.5 -1.7 1.5;
     -1.2 1.5  4.3  2.4;
     4.1  2.0  5.1  4.2;
     6.1  -1.4 3.0  -1.3];



% opgave 1a
b = [1.5; -2.2; 2.7; 4];
%1.5*A(:,1) -2.2*A(:,2)+2.7*A(:,3)+4*A(:,4)
A * b;

% opgave 1b
b = [2; 2.1; 0; -1.1];
A * b;

% opgave 1c
b = [0; 3.3; 1.2; -1];
A * b;

%%%%%%%%%%%%
% Opgave 2 %
%%%%%%%%%%%%
A = [1.3 2.1 -3.3 4.1;
     6.1 2.4 -1.3 -3.1;
     -2.2 5.1 3.2 2.1;
     2.2 6.1 7.2 -5.1];

B = [2.1  -1.1 1.2 4.2;
     -4.6 8.1 9.2 -3.3;
     2.5 5.2 -3.3 4.2;
     -0.7 2.8 -6.3 4.7];

v = [3.2 -4.6 1.8 7.1]';

% a 
3*A - 2*B;

% b
A - 4*B';

% c
P = 1 / 2 * (A + A');

% d 
Q = 1 / 2 * (A - A');

% e 
P' == P;
Q' == -1*Q;

P+ Q; % = A

%f 
A*v;

%g
B*(A*v);

%h
A*(B*v);

%i 
w = [3.5 -1.2 4.1 2]';
A * w;

%j
M = ones(4);

for j = 1:4
    M(:,j) = B * A(:,j);
end

M*v == B*(A*v); % allmost

%%%%%%%%%%%%
% Opgave 4 %
%%%%%%%%%%%%
A = [1.1 2.0 4.2 2.7 1.2 0.1;
     3.1 -1.5 4.7 8.3 -3.1 2.3;
     7.1 -8.5 5.7 19.5 -11.7 6.7;
     2.2 4.0 8.4 6.5 2.1 -3.4];

%a
A(2,:) += -3.1/1.1 * A(1,:);
A(3,:) += -7.1/1.1 * A(1,:);
A(4,:) += -2.2/1.1 * A(1,:);

A(3,:) += -A(3,2)/A(2,2) * A(2,:);
A(4,:) += -A(4,2)/A(2,2) * A(2,:);

temp = A(4,:);
A(4,:) = A(3,:);
A(3,:) = temp;

A(2,:) += -A(2,4)/A(3,4) * A(3,:);
A(1,:) += -A(1,4)/A(3,4) * A(3,:);

A(1,:) += -A(1,2)/A(2,2) * A(2,:);

A(1,:) /= A(1,1);
A(2,:) /= A(2,2);
A(3,:) /= A(3,4);

A; % er nu rre form

%b
A = [1.1 2.0 4.2 2.7 1.2 0.1;
     3.1 -1.5 4.7 8.3 -3.1 2.3;
     7.1 -8.5 5.7 19.5 -11.7 6.7;
     2.2 4.0 8.4 6.5 2.1 -3.4];


rref(A); % det samme

%%%%%%%%%%%%
% Opgave 5 %
%%%%%%%%%%%%

%a
b =[-1.0 2.3 8.9 1.6]';
rref([A b]);
% consistent

%b
b = [1.1 2.1 3.2 -1.4]';
rref([A b]);
% inconsistent

%c
b = [3.8 2.9 1.1 12.0]';
rref([A b]);
% consistent

%d
b = [1 1 -1 2]';
rref([A b]);
% inconsistent


%%%%%%%%%%%%
% Opgave 7 %
%%%%%%%%%%%%

% (a)
S = [1 1  2  3 0;
     2 0  1 -1 1;
    -1 1 -1  1 1;
     3 1  2  2 2;
     2 0  0 -1 2;
     1 1  1  1 1];
rref(S);
% dependant
S(:,5) == S(:,1) + S(:,2) - S(:,3); %true

% (b)
S = [2  1 -1  2 -2;
     1  2  1  1  1;
    -1  1  4  1  0;
     1  1  1 -1  1;
     3  0 -1  2 -1;
     1 -1  2  3 -2];
rref(S);
% independant

%%%%%%%%%%%%
% Opgave 8 %
%%%%%%%%%%%%

S = [1 1  2  3;
     2 0  1 -1;
    -1 1 -1  1;
     3 1  2  2;
     2 0  0 -1;
     1 1  1  1];

%a
v = [14; 2; -1; 12; -1; 5];
rref([S v]);
% not in span

%b
v = [4; 3; -2; 7; 3; 2];
rref([S v]);
% in span

v ==  S(:,1) * 2 - S(:,2) + S(:,4); %true

%c
v = [10; 6; -5; 13; 3; 5];
rref([S v]);
% in span

v ==  S(:,1) * 2 - S(:,2) + 3 * S(:,3) + S(:,4); %true

%d
v = [1; 6; -5; 4; 3; 1];
rref([S v]);
% not in span


% just some testing
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%55
S = [1 1  2  3 0;
     2 0  1 -1 1;
    -1 1 -1  1 1;
     3 1  2  2 2;
     2 0  0 -1 2;
     1 1  1  1 1];

v = [14; 2; -1; 12; -1; 5];
rref([S v]);

v = [4; 3; -2; 7; 3; 2];
rref([S v]);
% dont have to remove colloms to get a inconsistan set. Just only look if last commul kan be written as others
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5


%%%%%%%%%%%%
% Opgave 3 %
%%%%%%%%%%%%

%a
rotdeg(20) * [1 3]';

%b
rotdeg(30) *( rotdeg(20) * [1 3]' );

%c
rotdeg(50) * [1 3]';

%d
rotdeg(-20) *( rotdeg(20) * [1 3]' );

%e
%A_o1+o2 == A_o1 * A_o2

%f
%Weee

%g
% A_o * A_-o = eye

%h
%weee